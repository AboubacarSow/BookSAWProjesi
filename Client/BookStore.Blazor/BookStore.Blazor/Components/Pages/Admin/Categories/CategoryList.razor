@page "/admin/categories"

@inject CategoryStateService _categoryStateService
@implements IDisposable 
@rendermode InteractiveServer
@inject IServiceManager _manager

<PageTitle>Kategoriler</PageTitle>
@if(categories == null)
{
    <p><em>Loading...</em></p>
}else
{
    <div class="container mx-3">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div class="entete">
                <h4 class="title"><i class="fa-solid fa-list me-2"></i>Kategoriler</h4>
                <a href="admin/createCategory" class="btn btn-outline-primary">
                    <i class="fa-solid fa-plus"></i>
                    Yeni Kategori Ekle
                </a>
            </div>
        </div>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                <i class="fa-solid fa-triangle-exclamation"></i>
                @errorMessage
            </div>
        }
        @if (!string.IsNullOrEmpty(_categoryStateService.SuccessMessage))
        {
            <div class="alert alert-success" role="alert">
                <i class="fa-solid fa-circle-check"></i>
                @_categoryStateService.SuccessMessage
            </div>
        }
        <div class="d-flex margin-auto">
            <div class="input-group mb-3">
                <input type="text" class="form-control" placeholder="Arama yapın..." aria-label="Arama yapın..." aria-describedby="button-addon2">
                <button class="btn btn-outline-secondary" type="button" id="button-addon2">Arama</button>
            </div>
        </div>
        <div class="margin-auto mb-3 table-responsive tableau">           
            <table class="table table-hover table-striped table-sm ">
                <thead class="table-header rounded-3">
                    <tr>
                        <th>N°</th>
                        <th>Ad</th>
                        <th>İşlemler</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        count = 0;
                    }
                    @foreach(var category in categories)
                    {
                        count++;
                        <tr>
                            <td>@count</td>
                            <td>@category.CategoryName</td>
                            <td>
                                <div>
                                    <button class="btn btn-danger" @onclick="()=>Delete(category.CategoryId,count)">
                                        <i class="fa fa-trash me-1"></i> Sil
                                    </button>
                                    <a href="admin/updatecategory/@category.CategoryId" class="btn btn-success">
                                        <i class="fa fa-edit me-1"></i>
                                        Güncelle
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code{
    private List<ResultCategoryDto>? categories;
    private string errorMessage = string.Empty;
    private int categoryId;
    private int count { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (!_categoryStateService.Categories.Any())
        {
            await GetCategories();
            _categoryStateService.SetCategories(categories);
        }
        else
        {
            categories = _categoryStateService.Categories;
        }
        _categoryStateService.OnCategoriesChanged += StateHasChanged;
    }
    public void Dispose()
    {
        _categoryStateService.OnCategoriesChanged -= StateHasChanged;
    }
    private async Task GetCategories()
    {
        categories = await _manager.CategoryService.GetAllCategoriesAsync();
    }
    protected override void  OnParametersSet()
    {
        if (_categoryStateService.Categories.Any())
        {
            count = 0;
            categories = _categoryStateService.Categories;
        }

    }
    private async Task Delete(int id,int index)
    {
        var result = await _manager.CategoryService.DeleteCategoryAsync(id);
        if (!result.IsSuccessStatusCode)
        {
            errorMessage = "An error occured while trying to delete this category";
            StateHasChanged();
        }
        _categoryStateService.RemoveCategory(index);
        categories = _categoryStateService.Categories;
    }

   
}