@page "/admin/updatecategory/{categoryId:int}"
@inject CategoryStateService _categoryStateService
@inject IServiceManager _manager
@inject NavigationManager _navigationManager
@rendermode InteractiveServer
<!-- Header Content  Begin-->
<PageTitle> Kategori Güncelle</PageTitle>
<!-- Header Content  Begin-->


<div class="form-container mx-3">
    <h4 class="title text-center"><i class="fas fa-plus me-2"></i>Kategori Güncelle</h4>
    <hr class="mb-4" />
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            <i class="fas fa-exclamation-triangle"></i>
            @errorMessage
        </div>
    }
    <EditForm FormName="UpdateForm" Model="@category" OnValidSubmit="@UpdateCategoryAsync" Enhance>
        <DataAnnotationsValidator />
        <input type="hidden" @bind="category.CategoryId" />
        <div class="mb-3 form-div">
            <label for="categoryName" class="form-label">Kategori Ad</label>
            <InputText type="text" class="@GetInputClass(nameof(category.CategoryName))"
            id="categoryName" placeholder="Enter Category Name" @bind-Value="category.CategoryName" />
            <ValidationMessage For="@(() => category.CategoryName)" class="text-danger" />
        </div>
        <div class="d-flex justify-content-center">
            <button type="submit" class="btn btn-success">
                <i class="fa-solid fa-edit"></i>
                Güncelle
            </button>
            <a href="/admin/categories" class="btn btn-secondary ms-2">
                <i class="fas fa-list"></i>
                Kategoriler
            </a>
        </div>
    </EditForm>

</div>

@code {
    private string errorMessage = string.Empty;
    [Parameter]public int categoryId{ get; set; }
    [SupplyParameterFromForm(FormName = "CreateForm")]
    private CategoryForUpdateDto category { get; set; } = new();

    [CascadingParameter] private EditContext? editContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var dto = await _manager.CategoryService.GetCategoryAsync(categoryId);
        category.CategoryId = dto.CategoryId;
        category.CategoryName = dto.CategoryName;
    }

    private string GetInputClass(string fieldName)
    {
        if (editContext == null) return "form-control form-input";
        // Check if the field is valid
        var fieldIdentifier = new FieldIdentifier(category, fieldName);
        var isInvalid = editContext?.GetValidationMessages(fieldIdentifier).Any() == true;
        return isInvalid ? "form-control form-input invalid" : " form-control form-input";
    }
    private async Task UpdateCategoryAsync()
    {
        var response = await _manager.CategoryService.EditCategoryAsync(category);
        if (!response.IsSuccessStatusCode)
        {
            errorMessage = "An error occured when trying to create this item";
            StateHasChanged();
            return;
        }
        _categoryStateService.UpdateCategory(new ResultCategoryDto
            {
                CategoryId=category.CategoryId,
                CategoryName = category.CategoryName
            });
        _navigationManager.NavigateTo("/admin/categories");
    }
}

