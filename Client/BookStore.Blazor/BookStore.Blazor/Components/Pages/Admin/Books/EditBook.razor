@page "/admin/editBook/{bookId:int}"
@inject IServiceManager _manager
@inject BookStateService _bookStateService
@rendermode InteractiveServer
@inject NavigationManager _navigationManager

<PageTitle>Kitap Güncelle</PageTitle>
<div class="form-container mx-3">
    <h4 class="title text-center"><i class="fa-solid fa-book me-2"></i>Kitap Güncelleme</h4>
    <div class="d-flex justify-content-center mb-3">
        <hr class="mb-4 w-50 text-center" />
    </div>
    @if (!string.IsNullOrEmpty(erreurMessage))
    {
        <div class="alert alert-danger" role="alert">
            <i class="fa-solid fa-triangle-exclamation"></i>
            @erreurMessage
        </div>
    }
    <EditForm FormName="UpdateBookForm" Model="@book" OnValidSubmit="@EditBookAsync" Enhance>
        <DataAnnotationsValidator />
        <input type="hidden" @bind-value="book.Id" />
        <div class="mb-3 form-div">
            <label for="bookName" class="form-label">Kitap Adı</label>
            <InputText type="text" class="@GetInputClass(nameof(book.Name))" 
            id="bookName" placeholder="Kitap adı girin" @bind-Value="book.Name"/>
            <ValidationMessage For="@(() => book.Name)" class="text-danger" />
        </div>
        <div class="mb-3 form-div">
            <label for="bookPrice" class="form-label">Fiyat</label>
            <InputNumber type="number" class="@GetInputClass(nameof(book.Price))"
            id="bookPrice" placeholder="Fiyat girin" @bind-Value="book.Price" />
            <ValidationMessage For="@(() => book.Price)" class="text-danger" />
        </div>
        <div class="mb-3 form-div">
            <label for="bookCategory" class="form-label">Category</label>
            <InputSelect type="number" class="form-control " id="bookCategory" @bind-Value="book.CategoryId">
                <option value="">Seçiniz</option>
                @foreach (var category in categories)
                {
                    <option value="@category.CategoryId">@category.CategoryName</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => book.CategoryId)"class="text-danger" />
        </div>
        <div class="mb-3 form-div">
            <label for="bookStock" class="form-label">Stok</label>
            <InputNumber type="number" class="@GetInputClass(nameof(book.Stock))"
            id="bookStok" placeholder="Stok girin" @bind-Value="book.Stock" />
            <span class="text-danger"><ValidationMessage For="@(() => book.Stock)" /></span>
        </div>
        <div class="d-flex justify-content-center">
            <button type="submit" class="btn btn-success">
                <i class="fa-solid fa-edit"></i>
                Güncelle
            </button>
            <a href="/admin/books" class="btn btn-secondary ms-2">
                <i class="fa-solid fa-arrow-left"></i>
                Geri Dön
            </a>
        </div>
    </EditForm>
</div>

@code{
    private string erreurMessage=string.Empty;
    [Parameter]public  int bookId{get;set;}
    [CascadingParameter]private EditContext? editContext{get;set;}
    [SupplyParameterFromForm(FormName = "UpdateBookForm")]
    private UpdateBookDto book {get;set;}=new();
    private List<ResultCategoryDto> categories = [];
    protected override async Task OnInitializedAsync()
    {
        categories=await _manager.CategoryService.GetAllCategoriesAsync();
        await GetEditBookAsync(bookId);

    }
    private async Task GetEditBookAsync(int id)
    {
        var bookresult = await _manager.BookService.GetBookAsync(id);
        if (bookresult != null)
        {
            book.Id = bookresult.Id;
            book.Name = bookresult.Name;
            book.Price = bookresult.Price;
            book.Stock = bookresult.Stock;
            book.CategoryId = bookresult.Category.CategoryId; 
        }else erreurMessage = "Kitap bulunamadı.";
    }
    private async Task EditBookAsync()
    {
        if (book != null)
        {
            var result = await _manager.BookService.EditBookAsync(book);
            if (result != null)
            {
                _bookStateService.UpdateBook(new ResultBookDto()
                {
                    Id=book.Id,
                    Name=book.Name,
                    Stock=book.Stock,
                    Price=book.Price,
                    Category=await _manager.CategoryService.GetCategoryAsync(book.CategoryId)
                });
               
                _navigationManager.NavigateTo("/admin/books");
            }
            else
            {
                erreurMessage = "Kitap güncellenemedi.";
            }
        }
    }
    private string GetInputClass(string fieldName)
    {
        if (editContext == null) return "form-control form-input";
        // Check if the field is valid
        var fieldIdentifier = new FieldIdentifier(book!, fieldName);
        var isInvalid = editContext?.GetValidationMessages(fieldIdentifier).Any() == true;
        return isInvalid ? "form-control form-input invalid" : " form-control form-input";
    }
}